rawData = [
0x00, 0x6D, 0x5F, 0x62, 0x72, 0x69, 0x65, 0x66, 0x00, 0x8A, 0x0A, 0x0F,
	0x49, 0x66, 0x20, 0x49, 0x20, 0x6D, 0x61, 0x79, 0x20, 0x68, 0x61, 0x76,
	0x65, 0x20, 0x79, 0x6F, 0x75, 0x72, 0x20, 0x61, 0x74, 0x74, 0x65, 0x6E,
	0x74, 0x69, 0x6F, 0x6E, 0x2C, 0x20, 0x67, 0x65, 0x6E, 0x74, 0x6C, 0x65,
	0x6D, 0x65, 0x6E, 0x2E, 0x2E, 0x2E, 0x00, 0xFF, 0xFF, 0x31, 0x00, 0x03,
	0x63, 0x6F, 0x6D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x69, 0x77,
	0x31, 0x66, 0x70, 0x6F, 0x76, 0x31, 0x00, 0xA0, 0x00, 0x80, 0x00, 0x54,
	0x68, 0x65, 0x20, 0x4A, 0x61, 0x70, 0x61, 0x6E, 0x65, 0x73, 0x65, 0x20,
	0x64, 0x6F, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x73, 0x65, 0x65, 0x6D, 0x20,
	0x74, 0x6F, 0x20, 0x72, 0x65, 0x61, 0x6C, 0x69, 0x7A, 0x65, 0x20, 0x74,
	0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x69, 0x72, 0x20, 0x77, 0x61,
	0x72, 0x20, 0x69, 0x73, 0x20, 0x6C, 0x6F, 0x73, 0x74, 0x2E, 0x00, 0xF4,
	0xFF, 0xFF, 0x22, 0x00, 0x03, 0x63, 0x6F, 0x6D, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x19, 0x69, 0x77, 0x31, 0x66, 0x70, 0x6F, 0x76, 0x31, 0x00,
	0xA0, 0x00, 0x80, 0x00, 0x54, 0x68, 0x65, 0x72, 0x65, 0x66, 0x6F, 0x72,
	0x65, 0x2C, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4E, 0x61, 0x76, 0x79, 0x20,
	0x68, 0x61, 0x73, 0x20, 0x62, 0x65, 0x67, 0x75, 0x6E, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x73, 0x74, 0x65, 0x70,
	0x73, 0x20, 0x74, 0x6F, 0x77, 0x61, 0x72, 0x64, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x65, 0x76, 0x65, 0x6E, 0x74, 0x75, 0x61, 0x6C, 0x20, 0x61, 0x73,
	0x73, 0x61, 0x75, 0x6C, 0x74, 0x20, 0x6F, 0x6E, 0x20, 0x4A, 0x61, 0x70,
	0x61, 0x6E, 0x2E, 0x00, 0xF4, 0xFF, 0xFF, 0x2E, 0x22, 0x00, 0x69, 0x77,
	0x31, 0x6D, 0x61, 0x70, 0x31, 0x00, 0x64, 0x11, 0x06, 0x00, 0x0B, 0x00,
	0x0B, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x0D, 0x00, 0x98, 0x00,
	0x66, 0x00, 0x0A, 0x0F, 0x41, 0x74, 0x20, 0x64, 0x61, 0x77, 0x6E, 0x2C,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6E, 0x76, 0x61, 0x73, 0x69, 0x6F,
	0x6E, 0x20, 0x6F, 0x66, 0x20, 0x49, 0x77, 0x6F, 0x20, 0x4A, 0x69, 0x6D,
	0x61, 0x20, 0x62, 0x65, 0x67, 0x61, 0x6E, 0x2E, 0x00, 0xFF, 0xFF, 0x73,
	0x65, 0x05, 0x4B, 0x00, 0x03, 0x6A, 0x65, 0x74, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x16, 0x62, 0x72, 0x5F, 0x6A, 0x65, 0x73, 0x74, 0x00, 0x6F,
	0x82, 0x00, 0x80, 0x00, 0x41, 0x6E, 0x6F, 0x74, 0x68, 0x65, 0x72, 0x20,
	0x69, 0x73, 0x6C, 0x61, 0x6E, 0x64, 0x2C, 0x20, 0x73, 0x69, 0x72, 0x3F,
	0x20, 0x57, 0x68, 0x79, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6F, 0x6E,
	0x65, 0x3F, 0x00, 0xF4, 0xFF, 0xFF, 0x61, 0x20, 0x0C, 0x03, 0x70, 0x61,
	0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x62, 0x72, 0x5F, 0x70,
	0x61, 0x6E, 0x63, 0x00, 0x67, 0xA0, 0x00, 0x80, 0x00, 0x4E, 0x6F, 0x74,
	0x20, 0x61, 0x6E, 0x6F, 0x74, 0x68, 0x65, 0x72, 0x20, 0x69, 0x73, 0x6C,
	0x61, 0x6E, 0x64, 0x2C, 0x20, 0x73, 0x69, 0x72, 0x21, 0x20, 0x57, 0x68,
	0x79, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6F, 0x6E, 0x65, 0x3F, 0x00,
	0xF4, 0xFF, 0xFF, 0x6F, 0x72, 0x0D, 0x00, 0x69, 0x77, 0x31, 0x62, 0x6C,
	0x6B, 0x31, 0x00, 0x69, 0x0A, 0x0F, 0x4F, 0x75, 0x72, 0x20, 0x62, 0x6F,
	0x6D, 0x62, 0x65, 0x72, 0x73, 0x2C, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64,
	0x20, 0x6F, 0x6E, 0x20, 0x53, 0x61, 0x69, 0x70, 0x61, 0x6E, 0x2C, 0x20,
	0x61, 0x72, 0x65, 0x20, 0x61, 0x6C, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20,
	0x70, 0x6F, 0x75, 0x6E, 0x64, 0x69, 0x6E, 0x67, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x4A, 0x61, 0x70, 0x61, 0x6E, 0x65, 0x73, 0x65, 0x20, 0x68, 0x6F,
	0x6D, 0x65, 0x6C, 0x61, 0x6E, 0x64, 0x2E, 0x00, 0xFF, 0xFF, 0x61, 0x6E,
	0x00, 0x69, 0x77, 0x31, 0x62, 0x6C, 0x6B, 0x32, 0x00, 0x68, 0x0A, 0x0F,
	0x46, 0x6C, 0x79, 0x69, 0x6E, 0x67, 0x20, 0x66, 0x72, 0x6F, 0x6D, 0x20,
	0x49, 0x77, 0x6F, 0x20, 0x4A, 0x69, 0x6D, 0x61, 0x2C, 0x20, 0x68, 0x6F,
	0x77, 0x65, 0x76, 0x65, 0x72, 0x2C, 0x20, 0x77, 0x6F, 0x75, 0x6C, 0x64,
	0x20, 0x67, 0x72, 0x65, 0x61, 0x74, 0x6C, 0x79, 0x20, 0x73, 0x68, 0x6F,
	0x72, 0x74, 0x65, 0x6E, 0x20, 0x74, 0x68, 0x65, 0x69, 0x72, 0x20, 0x66,
	0x6C, 0x69, 0x67, 0x68, 0x74, 0x73, 0x2E, 0x2E, 0x2E, 0x00, 0xFF, 0xFF,
	0x61, 0x69, 0x03, 0x63, 0x6F, 0x6D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xFF, 0x69, 0x77, 0x31, 0x66, 0x70, 0x6F, 0x76, 0x32, 0x00, 0xA0, 0x00,
	0x80, 0x00, 0x2E, 0x2E, 0x2E, 0x72, 0x65, 0x73, 0x75, 0x6C, 0x74, 0x69,
	0x6E, 0x67, 0x20, 0x69, 0x6E, 0x20, 0x6D, 0x6F, 0x72, 0x65, 0x20, 0x62,
	0x6F, 0x6D, 0x62, 0x73, 0x20, 0x64, 0x72, 0x6F, 0x70, 0x70, 0x65, 0x64,
	0x2C, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x6D, 0x6F, 0x72, 0x65, 0x20, 0x69,
	0x6E, 0x64, 0x75, 0x73, 0x74, 0x72, 0x69, 0x65, 0x73, 0x20, 0x64, 0x65,
	0x73, 0x74, 0x72, 0x6F, 0x79, 0x65, 0x64, 0x2E, 0x00, 0xF4, 0xFF, 0xFF,
	0x2E, 0x22, 0x05, 0x4A, 0x00, 0x03, 0x62, 0x69, 0x67, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x0E, 0x62, 0x72, 0x5F, 0x62, 0x69, 0x67, 0x67, 0x73,
	0x00, 0x82, 0x00, 0x80, 0x00, 0x49, 0x27, 0x6D, 0x20, 0x69, 0x6E, 0x20,
	0x66, 0x61, 0x76, 0x6F, 0x72, 0x20, 0x6F, 0x66, 0x20, 0x61, 0x6E, 0x79,
	0x74, 0x68, 0x69, 0x6E, 0x67, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x73,
	0x68, 0x6F, 0x72, 0x74, 0x65, 0x6E, 0x73, 0x20, 0x74, 0x68, 0x69, 0x73,
	0x20, 0x64, 0x61, 0x6D, 0x6E, 0x20, 0x77, 0x61, 0x72, 0x2E, 0x00, 0xF4,
	0xFF, 0xFF, 0x73, 0x00, 0x03, 0x62, 0x69, 0x67, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x19, 0x62, 0x72, 0x5F, 0x62, 0x69, 0x67, 0x67, 0x73, 0x00,
	0x82, 0x00, 0x80, 0x00, 0x44, 0x6F, 0x6E, 0x27, 0x74, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x4A, 0x61, 0x70, 0x73, 0x20, 0x6B, 0x6E, 0x6F, 0x77, 0x20,
	0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x79, 0x27, 0x72, 0x65,
	0x20, 0x62, 0x65, 0x61, 0x74, 0x3F, 0x00, 0xF4, 0xFF, 0xFF, 0x2E, 0x22,
	0x0C, 0x03, 0x73, 0x71, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
	0x62, 0x72, 0x5F, 0x73, 0x71, 0x69, 0x6E, 0x74, 0x00, 0xA0, 0x00, 0x80,
	0x00, 0x49, 0x27, 0x6D, 0x20, 0x69, 0x6E, 0x20, 0x66, 0x61, 0x76, 0x6F,
	0x72, 0x20, 0x6F, 0x66, 0x20, 0x61, 0x6E, 0x79, 0x74, 0x68, 0x69, 0x6E,
	0x67, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x73, 0x68, 0x6F, 0x72, 0x74,
	0x65, 0x6E, 0x73, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x77, 0x61, 0x72,
	0x2E, 0x2E, 0x2E, 0x00, 0xF4, 0xFF, 0xFF, 0x72, 0x74, 0x03, 0x73, 0x71,
	0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x62, 0x72, 0x5F, 0x73,
	0x71, 0x69, 0x6E, 0x74, 0x00, 0xA0, 0x00, 0x80, 0x00, 0x44, 0x6F, 0x6E,
	0x27, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4E, 0x69, 0x70, 0x73, 0x20,
	0x6B, 0x6E, 0x6F, 0x77, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68,
	0x65, 0x79, 0x27, 0x72, 0x65, 0x20, 0x62, 0x65, 0x61, 0x74, 0x3F, 0x00,
	0xF4, 0xFF, 0xFF, 0x22, 0x00, 0x0D, 0x03, 0x63, 0x6F, 0x6D, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x18, 0x69, 0x77, 0x31, 0x66, 0x70, 0x6F, 0x76,
	0x32, 0x00, 0xA0, 0x00, 0x80, 0x00, 0x44, 0x61, 0x6D, 0x61, 0x67, 0x65,
	0x64, 0x20, 0x62, 0x6F, 0x6D, 0x62, 0x65, 0x72, 0x73, 0x20, 0x77, 0x69,
	0x6C, 0x6C, 0x20, 0x61, 0x6C, 0x73, 0x6F, 0x20, 0x62, 0x65, 0x20, 0x61,
	0x62, 0x6C, 0x65, 0x20, 0x74, 0x6F, 0x20, 0x75, 0x73, 0x65, 0x20, 0x49,
	0x77, 0x6F, 0x20, 0x4A, 0x69, 0x6D, 0x61, 0x20, 0x61, 0x73, 0x20, 0x61,
	0x6E, 0x20, 0x65, 0x6D, 0x65, 0x72, 0x67, 0x65, 0x6E, 0x63, 0x79, 0x20,
	0x6C, 0x61, 0x6E, 0x64, 0x69, 0x6E, 0x67, 0x20, 0x66, 0x69, 0x65, 0x6C,
	0x64, 0x2E, 0x00, 0xF4, 0xFF, 0xFF, 0x70, 0x73, 0x03, 0x63, 0x6F, 0x6D,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x69, 0x77, 0x31, 0x66, 0x70,
	0x6F, 0x76, 0x32, 0x00, 0xA0, 0x00, 0x80, 0x00, 0x41, 0x6E, 0x64, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x41, 0x72, 0x6D, 0x79, 0x20, 0x63, 0x61, 0x6E,
	0x20, 0x62, 0x61, 0x73, 0x65, 0x20, 0x66, 0x69, 0x67, 0x68, 0x74, 0x65,
	0x72, 0x73, 0x20, 0x6F, 0x6E, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x73,
	0x6C, 0x61, 0x6E, 0x64, 0x2C, 0x20, 0x74, 0x6F, 0x20, 0x70, 0x72, 0x6F,
	0x76, 0x69, 0x64, 0x65, 0x20, 0x62, 0x6F, 0x6D, 0x62, 0x65, 0x72, 0x20,
	0x65, 0x73, 0x63, 0x6F, 0x72, 0x74, 0x2E, 0x00, 0xF4, 0xFF, 0xFF, 0x22,
	0x00, 0x03, 0x61, 0x69, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17,
	0x62, 0x72, 0x5F, 0x72, 0x70, 0x6F, 0x76, 0x00, 0x62, 0xA0, 0x00, 0x80,
	0x00, 0x57, 0x65, 0x27, 0x72, 0x65, 0x20, 0x73, 0x6F, 0x6C, 0x64, 0x20,
	0x6F, 0x6E, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6E, 0x76, 0x61, 0x73,
	0x69, 0x6F, 0x6E, 0x2C, 0x20, 0x73, 0x69, 0x72, 0x2E, 0x20, 0x57, 0x68,
	0x61, 0x74, 0x27, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6D, 0x69, 0x73,
	0x73, 0x69, 0x6F, 0x6E, 0x3F, 0x00, 0xF4, 0xFF, 0xFF, 0x2E, 0x22, 0x03,
	0x63, 0x6F, 0x6D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x69, 0x77,
	0x31, 0x66, 0x70, 0x6F, 0x76, 0x32, 0x00, 0xA0, 0x00, 0x80, 0x00, 0x4F,
	0x75, 0x72, 0x20, 0x74, 0x72, 0x6F, 0x6F, 0x70, 0x73, 0x20, 0x68, 0x61,
	0x76, 0x65, 0x20, 0x66, 0x6F, 0x75, 0x67, 0x68, 0x74, 0x20, 0x74, 0x68,
	0x65, 0x69, 0x72, 0x20, 0x77, 0x61, 0x79, 0x20, 0x6F, 0x66, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x62, 0x65, 0x61, 0x63, 0x68, 0x65, 0x73, 0x2E,
	0x2E, 0x2E, 0x00, 0xF4, 0xFF, 0xFF, 0x22, 0x00, 0x00, 0x69, 0x77, 0x31,
	0x6D, 0x61, 0x70, 0x31, 0x00, 0x20, 0x11, 0x05, 0x00, 0x0D, 0x00, 0x0D,
	0x00, 0x0E, 0x00, 0x0E, 0x00, 0x0F, 0x00, 0x8F, 0x00, 0x4F, 0x00, 0x0A,
	0x0F, 0x2E, 0x2E, 0x2E, 0x62, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x79,
	0x20, 0x68, 0x61, 0x76, 0x65, 0x6E, 0x27, 0x74, 0x20, 0x62, 0x65, 0x65,
	0x6E, 0x20, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x74, 0x6F, 0x20, 0x62, 0x72,
	0x65, 0x61, 0x6B, 0x20, 0x4A, 0x61, 0x70, 0x20, 0x72, 0x65, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6E, 0x63, 0x65, 0x20, 0x61, 0x74, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x61, 0x69, 0x72, 0x66, 0x69, 0x65, 0x6C, 0x64, 0x2E, 0x00,
	0xFF, 0xFF, 0x66, 0x00, 0x00, 0x69, 0x77, 0x6F, 0x61, 0x69, 0x72, 0x66,
	0x00, 0x20, 0x0A, 0x0F, 0x59, 0x6F, 0x75, 0x72, 0x20, 0x6D, 0x69, 0x73,
	0x73, 0x69, 0x6F, 0x6E, 0x20, 0x69, 0x73, 0x20, 0x74, 0x6F, 0x20, 0x70,
	0x6F, 0x75, 0x6E, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6E, 0x65,
	0x6D, 0x79, 0x20, 0x62, 0x75, 0x6E, 0x6B, 0x65, 0x72, 0x73, 0x20, 0x6E,
	0x65, 0x61, 0x72, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x61, 0x69, 0x72,
	0x66, 0x69, 0x65, 0x6C, 0x64, 0x2E, 0x00, 0xFF, 0xFF, 0x6F, 0x20, 0x00,
	0x73, 0x75, 0x72, 0x69, 0x62, 0x61, 0x63, 0x68, 0x00, 0x0A, 0x0F, 0x42,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x4D, 0x74, 0x2E,
	0x20, 0x53, 0x75, 0x72, 0x69, 0x62, 0x61, 0x63, 0x68, 0x69, 0x20, 0x2D,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x4A, 0x61, 0x70, 0x73, 0x20, 0x68, 0x61,
	0x76, 0x65, 0x20, 0x61, 0x6E, 0x74, 0x69, 0x2D, 0x61, 0x69, 0x72, 0x63,
	0x72, 0x61, 0x66, 0x74, 0x20, 0x67, 0x75, 0x6E, 0x73, 0x20, 0x68, 0x69,
	0x64, 0x64, 0x65, 0x6E, 0x20, 0x69, 0x6E, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x63, 0x61, 0x76, 0x65, 0x73, 0x2E, 0x00, 0xFF, 0xFF, 0x65, 0x6D, 0x03,
	0x62, 0x69, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x62, 0x72,
	0x5F, 0x62, 0x69, 0x67, 0x67, 0x73, 0x00, 0x82, 0x00, 0x80, 0x00, 0x57,
	0x68, 0x61, 0x74, 0x20, 0x61, 0x62, 0x6F, 0x75, 0x74, 0x20, 0x65, 0x6E,
	0x65, 0x6D, 0x79, 0x20, 0x61, 0x69, 0x72, 0x20, 0x70, 0x6F, 0x77, 0x65,
	0x72, 0x3F, 0x00, 0xF4, 0xFF, 0xFF, 0x2E, 0x22, 0x03, 0x63, 0x6F, 0x6D,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x69, 0x77, 0x31, 0x66, 0x70,
	0x6F, 0x76, 0x32, 0x00, 0xA0, 0x00, 0x80, 0x00, 0x54, 0x68, 0x69, 0x73,
	0x20, 0x69, 0x73, 0x6C, 0x61, 0x6E, 0x64, 0x20, 0x68, 0x61, 0x73, 0x20,
	0x62, 0x65, 0x65, 0x6E, 0x20, 0x75, 0x6E, 0x64, 0x65, 0x72, 0x20, 0x63,
	0x6F, 0x6E, 0x73, 0x74, 0x61, 0x6E, 0x74, 0x20, 0x62, 0x6F, 0x6D, 0x62,
	0x61, 0x72, 0x64, 0x6D, 0x65, 0x6E, 0x74, 0x20, 0x66, 0x6F, 0x72, 0x20,
	0x37, 0x32, 0x20, 0x64, 0x61, 0x79, 0x73, 0x2E, 0x00, 0xF4, 0xFF, 0xFF,
	0x64, 0x20, 0x03, 0x63, 0x6F, 0x6D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xFF, 0x69, 0x77, 0x31, 0x66, 0x70, 0x6F, 0x76, 0x32, 0x00, 0xA0, 0x00,
	0x80, 0x00, 0x54, 0x68, 0x65, 0x20, 0x4A, 0x61, 0x70, 0x73, 0x20, 0x64,
	0x6F, 0x6E, 0x27, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x20,
	0x73, 0x69, 0x6E, 0x67, 0x6C, 0x65, 0x20, 0x70, 0x6C, 0x61, 0x6E, 0x65,
	0x20, 0x6C, 0x65, 0x66, 0x74, 0x20, 0x6F, 0x6E, 0x20, 0x74, 0x68, 0x69,
	0x73, 0x20, 0x69, 0x73, 0x6C, 0x61, 0x6E, 0x64, 0x2E, 0x2E, 0x2E, 0x00,
	0xF4, 0xFF, 0xFF, 0x22, 0x00, 0x00, 0x69, 0x77, 0x31, 0x6D, 0x61, 0x70,
	0x31, 0x00, 0x00, 0x11, 0x06, 0x00, 0x01, 0x00, 0x01, 0x00, 0x02, 0x00,
	0x02, 0x00, 0x03, 0x00, 0x03, 0x00, 0x65, 0x00, 0x7D, 0x00, 0x0A, 0x0F,
	0x2E, 0x2E, 0x2E, 0x61, 0x6E, 0x64, 0x20, 0x77, 0x65, 0x27, 0x72, 0x65,
	0x20, 0x61, 0x20, 0x6C, 0x6F, 0x6E, 0x67, 0x20, 0x77, 0x61, 0x79, 0x20,
	0x66, 0x72, 0x6F, 0x6D, 0x20, 0x61, 0x6E, 0x79, 0x20, 0x6F, 0x74, 0x68,
	0x65, 0x72, 0x20, 0x61, 0x69, 0x72, 0x62, 0x61, 0x73, 0x65, 0x2E, 0x00,
	0xFF, 0xFF, 0x20, 0x61, 0x03, 0x63, 0x6F, 0x6D, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x13, 0x69, 0x77, 0x31, 0x66, 0x70, 0x6F, 0x76, 0x32, 0x00,
	0xA0, 0x00, 0x80, 0x00, 0x44, 0x69, 0x73, 0x6D, 0x69, 0x73, 0x73, 0x65,
	0x64, 0x2E, 0x00, 0xF4, 0xFF, 0xFF, 0x2E, 0x22
]

# Types de frames connus
FRAME_TYPES = {
    0x00: "GROUP_SHOT",
    0x02: "GROUP_SHOT_CHARCTR_TALK",
    0x03: "CLOSEUP",
    0x04: "CLOSEUP_CONTINUATION",
    0x0A: "SHOW_TEXT",
    0x0E: "UNKNOWN",
    0x0F: "CHOOSE_WINGMAN",
}

def is_ascii_printable(byte):
    """Verifie si un byte est un caractere ASCII imprimable"""
    return 0x20 <= byte <= 0x7E or byte == 0x00

def find_end_markers(data, start):
    """Trouve les marqueurs de fin (0xF4, 0xFF, 0xFF ou 0xFF, 0xFF)"""
    i = start
    while i < len(data) - 2:
        if data[i] == 0xF4 and data[i+1] == 0xFF and data[i+2] == 0xFF:
            return i, "0xF4, 0xFF, 0xFF", 3
        elif data[i] == 0xFF and data[i+1] == 0xFF:
            return i, "0xFF, 0xFF", 2
        i += 1
    return -1, None, 0

def extract_string(data, start):
    """Extrait une chaîne null-terminated"""
    end = start
    while end < len(data) and data[end] != 0x00:
        end += 1
    return bytes(data[start:end]).decode('ascii', errors='ignore'), end

def is_valid_frame_start(data, pos):
    """Verifie si la position est un vrai debut de frame"""
    if pos >= len(data):
        return False
    
    frame_type = data[pos]
    
    # Verifier si c'est un type de frame connu
    if frame_type not in FRAME_TYPES:
        return False
    
    # Pour GROUP_SHOT (0x00), verifier qu'un nom de lieu suit
    if frame_type == 0x00:
        if pos + 4 >= len(data):
            return False
        # Verifier que ça ressemble a un nom de lieu ASCII
        for i in range(1, min(4, len(data) - pos)):
            if not is_ascii_printable(data[pos + i]):
                return False
        return True
    if frame_type == 0x0A:
        for i in range(1, min(4, len(data) - pos+1)):
            if not is_ascii_printable(data[pos + i]):
                return False
        return True
    # Pour les types 0x03 et 0x05, verifier qu'un nom de personnage suit
    if frame_type in [0x03]:
        if pos + 4 >= len(data):
            return False
        
        # Verifier que les 3 prochains bytes ressemblent a un nom
        for i in range(1, 4):
            if pos + i >= len(data):
                return False
            if not is_ascii_printable(data[pos + i]):
                return False
        
        # Verifier qu'il y a un null terminator pas trop loin
        null_found = False
        for i in range(1, 8):
            if pos + i >= len(data):
                break
            if data[pos + i] == 0x00:
                null_found = True
                break
        
        return null_found
    
    return True

def parse_conversation(data):
    """Parse les donnees de conversation et affiche l'analyse"""
    pos = 0
    frame_num = 0
    
    print("=" * 80)
    print("ANALYSE DES FRAMES DE CONVERSATION")
    print("=" * 80)
    
    while pos < len(data):
        frame_num += 1
        
        # Trouver le type de frame
        if not is_valid_frame_start(data, pos):
            print(f"\n Position {pos:04d} (0x{pos:04X}): Pas un debut de frame valide (0x{data[pos]:02X})")
            pos += 1
            continue
        
        frame_type = data[pos]
        print(f"\n{'='*80}")
        print(f"FRAME #{frame_num} - Position {pos:04d} (0x{pos:04X})")
        print(f"Type: 0x{frame_type:02X} ({FRAME_TYPES.get(frame_type, 'UNKNOWN')})")
        print(f"{'='*80}")
        
        start_pos = pos
        pos += 1
        
        # Traiter GROUP_SHOT (0x00)
        # Structure: type(1) + lieu(var) + 0x00 + metadata(3) + texte
        if frame_type == 0x00:
            location_name, pos = extract_string(data, pos)
            print(f" Lieu: '{location_name}'")
            pos += 1  # null terminator
            
            # Extraire Metas (3 bytes non-ASCII)
            metadata = []
            for _ in range(1):
                if pos < len(data):
                    metadata.append(f"0x{data[pos]:02X}")
                    pos += 1
            
            if metadata:
                print(f"Metadonnees: {', '.join(metadata)}")
            
            
        elif frame_type == 0x0A:
            # Extraire le texte
            pos += 1
            if pos < len(data) and is_ascii_printable(data[pos]) and data[pos] != 0x00:
                text, pos = extract_string(data, pos)
                print(f"\nDIALOGUE:")
                print(f"   \"{text}\"")
                pos += 1  # null terminator
        # Traiter CLOSEUP (0x03)
        # Structure: type(1) + personnage(var) + 0x00 + padding(5) + lieu(var) + 0x00 + metadata(3) + texte
        elif frame_type == 0x03:
            char_name, pos = extract_string(data, pos)
            print(f" Personnage: '{char_name}'")
            pos += 1  # null terminator
            
            # Sauter 5 bytes de padding (0x00, 0x00, 0x00, 0x00, 0x00)
            skip_bytes = []
            padding_count = 0
            while pos < len(data) and data[pos] == 0x00 and padding_count < 5:
                skip_bytes.append(f"0x{data[pos]:02X}")
                pos += 1
                padding_count += 1
            
            if skip_bytes:
                print(f"Padding: {', '.join(skip_bytes)}")
            
            # Extraire des Metas (bytes non-ASCII avant le texte)
            metadata = []
            while pos < len(data) and not is_ascii_printable(data[pos]):
                metadata.append(f"0x{data[pos]:02X}")
                pos += 1
                if len(metadata) > 10:
                    break
            if metadata:
                print(f"Metas: {', '.join(metadata)}")

            # Extraire le nom du decor/lieu
            if pos < len(data) and is_ascii_printable(data[pos]) and data[pos] != 0x00:
                location_name, pos = extract_string(data, pos)
                print(f"Lieu: '{location_name}'")
                pos += 1  # null terminator
            s = pos
            while pos < len(data) -1:
                if (data[pos] == 0x80 and data[pos+1] == 0x00):
                    pos += 2
                    break
                print (f"skipping byte: 0x{data[pos]:02X} at position {pos}")
                pos += 1
            #pos += 1
            print(f"Position avant texte: {pos - s}")
            
            
            # Extraire le texte
            if pos < len(data) and is_ascii_printable(data[pos]) and data[pos] != 0x00:
                text, pos = extract_string(data, pos)
                print(f"\n DIALOGUE:")
                print(f"   \"{text}\"")
                pos += 1  # null terminator
        
        
        # Trouver les marqueurs de fin
        end_pos, marker_type, marker_len = find_end_markers(data, pos)
        
        if end_pos != -1:
            print(f"\nMarqueur de fin trouve a {end_pos:04d} (0x{end_pos:04X}): {marker_type}")
            
            # Bytes entre le texte et les marqueurs
            if end_pos > pos:
                between = [f"0x{data[i]:02X}" for i in range(pos, end_pos)]
                if between:
                    print(f"Bytes avant marqueur: {', '.join(between)}")
            
            # Avancer apres les marqueurs
            pos = end_pos + marker_len
            
            # Bytes entre les marqueurs et le prochain frame
            padding_bytes = []
            next_frame_pos = pos
            
            while next_frame_pos < len(data):
                if is_valid_frame_start(data, next_frame_pos):
                    break
                padding_bytes.append(f"0x{data[next_frame_pos]:02X}")
                next_frame_pos += 1
                if len(padding_bytes) > 10:
                    break
            
            if padding_bytes:
                print(f"Padding apres marqueur: {', '.join(padding_bytes)}")
                print(f"Nombre de bytes de padding: {len(padding_bytes)}")
            
            print(f"Prochain frame commence a: {next_frame_pos:04d} (0x{next_frame_pos:04X})")
            print(f"Offset total de la frame: {next_frame_pos - start_pos} bytes")
            
            pos = next_frame_pos
        else:
            print("\n  Pas de marqueur de fin trouve, fin de l'analyse")
            break
    print("\n" + "=" * 80)
    print(f"Analyse terminee. Total frames analysees: {frame_num} {len(data) - pos} bytes restants non analyses.")
# Lancer l'analyse
parse_conversation(rawData)